openapi: '3.0.2'
info:
  title: Shop
  version: 1.0.0
  description: Shop with a price filtering system
components:
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        itemsInOrder:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        totalPrice:
          type: integer
          format: int64
paths:
  /user/login:
      post:
        operationId: loginUser
        parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
        responses:
            200:
              description: successful operation
              headers:
                X-Expires-After:
                  description: date in UTC when token expires
                  schema:
                    type: string
                    format: date-time
                content:
                  schema: {}
                application/json:
                  schema:
                    type: string
            400:
              description: Invalid username/password supplied
              content: {}
  /user/logout:
     post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "405":
          description: "Invalid input"
      security:
        - api_key: []
  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        content:
          image/png:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        "405":
            description: "Invalid input"
      security:
        - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: ID of item to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: ID of item that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
          content:
              application/json:
                schema:
                  properties:
                    name:
                      type: string
                      description: Updated name of the item
                    status:
                      type: string
                      description: Updated status of the item
      responses:
          405:
            description: Invalid input
            content: {}
      security:
        - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: Item id to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - api_key: []
  /itemlist:
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: Lower price limit
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: Upper price limit
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: Invalid price range
          content: {}
    post:
      summary: Set min and max price
      operationId: setPrice
      parameters:
      - name: minPrice
        in: query
        description: Minimum price in range
        required: true
        schema:
          type: integer
          format: int64
      - name: maxPrice
        in: query
        description: Maximum price in range
        required: true
        schema:
          type: integer
          format: int64
      responses:
          200:
            description: successful operation, filter set
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Item'
          400:
            description: Invalid price
            content: {}
  /order:
    post:
      summary: post a new order
      operationId: "postOrder"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: "Invalid operation"
    get:
      summary: Lists orders filtered by date
      operationId: ListOrders
      parameters:
      - name: date
        in: query
        description: sort by date
        required: false
        schema:
          type: string
          format: date
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        400:
          description: Invalid date
          content: {}
      security:
        - api_key: []
  /order/{orderId}:
    get:
      summary: "Get order information"
      operationId: "getOrder"
      parameters:
        - name: "orderId"
          in: path
          description: "id of the order"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Order not found"
      security:
        - api_key: []
    put:
      summary: update order information
      operationId: UpdateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
    delete:
      summary: "Delete order"
      description: "This can only be done by the logged in user."
      operationId: "deleteOrder"
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be updated
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
            description: "successful operation"
            content:
              application/json:
                schema:
                  $ref: "#/components/schemas/Order"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
